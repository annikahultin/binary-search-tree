public class BSTTester {

    public static void main(String[] args) {

        //basic tests
        BST tree = new BST();
        tree.insert(4);
        tree.insert(6);
        tree.insert(5);
        tree.preorder();
        tree.insert(2);
        tree.insert(1);
        tree.insert(3);
        tree.preorder();
        tree.postorder();
        tree.inorder();
        tree.insert(4);
        tree.insert(5);
        tree.insert(2);

        //intial delete test
        tree.preorder();
        tree.delete(2);
        System.out.print("Delete 2: ");
        tree.preorder();

        // deleting the root
        BST tree1 = new BST();
        tree1.insert(4);
        tree1.insert(2);
        tree1.insert(3);
        tree1.delete(4);
        System.out.print("Delete root(4): ");
        tree1.preorder();
        System.out.print("Postorder: ");
        tree1.postorder();
        System.out.print("Inorder: ");
        tree1.inorder();
        System.out.println("Size: " + tree1.size());
        System.out.println();
        tree1.delete(3);
        tree1.insert(4);
        tree1.insert(5);
        tree1.insert(3);
        System.out.print("Tree: ");
        tree1.preorder();
        tree1.delete(2);
        System.out.print("Delete root(2): ");
        tree1.preorder();
        System.out.print("Postorder: ");
        tree1.postorder();
        System.out.print("Inorder: ");
        tree1.inorder();
        System.out.println("Size: " + tree1.size());
        System.out.println();

        //deleting the root
        System.out.println();
        System.out.println("Deleting root with 2 children");
        BST tree2 = new BST();
        tree2.insert(5);
        tree2.insert(3);
        tree2.insert(4);
        tree2.insert(2);
        tree2.insert(7);
        tree2.insert(6);
        tree2.insert(8);
        System.out.print("Tree: ");
        tree2.preorder();
        tree2.delete(5);
        System.out.print("Delete root(5): ");
        tree2.preorder();
        System.out.print("Postorder: ");
        tree2.postorder();
        System.out.print("Inorder: ");
        tree2.inorder();
        System.out.println("Size: " + tree2.size());
        System.out.println();
        tree2.delete(4);
        System.out.print("Delete root(4): ");
        tree2.preorder();
        System.out.print("Postorder: ");
        tree2.postorder();
        System.out.print("Inorder: ");
        tree2.inorder();
        System.out.println("Size: " + tree2.size());
        System.out.println();

        // leaf delete test
        System.out.println();
        System.out.println("Delete Tests:");
        BST tree3 = new BST();
        tree3.insert(7);
        System.out.print("Tree: ");
        tree3.preorder();
        tree3.delete(7);
        System.out.print("Delete root(7): ");
        tree3.preorder();
        System.out.print("Postorder: ");
        tree3.postorder();
        System.out.print("Inorder: ");
        tree3.inorder();
        System.out.println("Size: " + tree3.size());
        System.out.println();
        tree3.insert(7);
        tree3.insert(4);
        tree3.insert(8);
        tree3.insert(3);
        tree3.insert(5);
        System.out.print("Tree: ");
        tree3.preorder();
        tree3.delete(3);
        System.out.print("Delete left leaf(3): ");
        tree3.preorder();
        System.out.print("Postorder: ");
        tree3.postorder();
        System.out.print("Inorder: ");
        tree3.inorder();
        System.out.println("Size: " + tree3.size());
        System.out.println();
        tree3.delete(5);
        System.out.print("Delete right leaf(5): ");
        tree3.preorder();
        System.out.print("Postorder: ");
        tree3.postorder();
        System.out.print("Inorder: ");
        tree3.inorder();
        System.out.println("Size: " + tree3.size());
        System.out.println();

        // one child tests
        tree3.insert(3);
        System.out.print("Tree: ");
        tree3.preorder();
        tree3.delete(4);
        System.out.print("Deleted is left child/has one left child(4): ");
        tree3.preorder();
        System.out.print("Postorder: ");
        tree3.postorder();
        System.out.print("Inorder: ");
        tree3.inorder();
        System.out.println("Size: " + tree3.size());
        System.out.println();
        tree3.insert(4);
        System.out.print("Tree: ");
        tree3.preorder();
        tree3.delete(3);
        System.out.print("Deleted is left child/has one right child(3): ");
        tree3.preorder();
        System.out.print("Postorder: ");
        tree3.postorder();
        System.out.print("Inorder: ");
        tree3.inorder();
        System.out.println("Size: " + tree3.size());
        System.out.println();
        tree3.delete(8);
        tree3.insert(9);
        tree3.insert(8);
        System.out.print("Tree: ");
        tree3.preorder();
        tree3.delete(9);
        System.out.print("Deleted is right chil/has one left child(9): ");
        tree3.preorder();
        System.out.print("Postorder: ");
        tree3.postorder();
        System.out.print("Inorder: ");
        tree3.inorder();
        System.out.println("Size: " + tree3.size());
        System.out.println();
        tree3.insert(9);
        System.out.print("Tree: ");
        tree3.preorder();
        tree3.delete(8);
        System.out.print("Deleted is right child/has one right child(8): ");
        tree3.preorder();
        System.out.print("Postorder: ");
        tree3.postorder();
        System.out.print("Inorder: ");
        tree3.inorder();
        System.out.println("Size: " + tree3.size());
        System.out.println();

        //two child tests
        BST tree4 = new BST();
        tree4.insert(7);
        tree4.insert(4);
        tree4.insert(2);
        tree4.insert(3);
        tree4.insert(5);
        tree4.insert(11);
        tree4.insert(9);
        tree4.insert(10);
        tree4.insert(12);
        System.out.print("Tree: ");
        tree4.preorder();
        tree4.delete(4);
        System.out.print("deleted has two children/is left child: ");
        tree4.preorder();
        System.out.print("Postorder: ");
        tree4.postorder();
        System.out.print("Inorder: ");
        tree4.inorder();
        System.out.println("Size: " + tree4.size());
        System.out.println();
        tree4.delete(11);
        System.out.print("Deleted has two children/is right child: ");
        tree4.preorder();
        System.out.print("Postorder: ");
        tree4.postorder();
        System.out.print("Inorder: ");
        tree4.inorder();
        System.out.println("Size: " + tree4.size());
        System.out.println();
        tree4.delete(3);
        System.out.print("Deleted has two children/is left child(replacement is left child): ");
        tree4.preorder();
        System.out.print("Postorder: ");
        tree4.postorder();
        System.out.print("Inorder: ");
        tree4.inorder();
        System.out.println("Size: " + tree4.size());
        System.out.println();
        tree4.delete(10);
        System.out.print("Deleted has two children/is right child(replacement is left child): ");
        tree4.preorder();
        tree.delete(20);
        System.out.print("Postorder: ");
        tree4.postorder();
        System.out.print("Inorder: ");
        tree4.inorder();
        System.out.println("Size: " + tree4.size());
        System.out.println();

        BST tree5 = new BST();
        tree5.insert(10);
        tree5.insert(12);
        tree5.insert(9);
        System.out.print("Tree: ");
        tree5.preorder();
        tree5.delete(12);
        tree5.delete(9);
        System.out.print("Tree: ");
        tree5.preorder();
        tree5.delete(10);
        tree5.delete(10);
        System.out.print("Tree: ");
        tree5.preorder();
        System.out.println("Size: " + tree5.size());
        tree5.insert(-2);
        tree5.insert(-1);

        BST tree6 = new BST();
        tree6.insert(30);
        tree6.insert(20);
        tree6.insert(10);
        tree6.insert(9);
        tree6.insert(12);
        tree6.insert(15);
        tree6.insert(23);
        tree6.insert(21);
        tree6.insert(29);
        tree6.insert(25);
        tree6.insert(40);
        tree6.insert(33);
        tree6.insert(31);
        tree6.insert(32);
        tree6.insert(34);
        tree6.insert(50);
        tree6.insert(45);
        tree6.insert(60);
        System.out.print("Tree: ");
        tree6.preorder();
        System.out.println("Size: " + tree6.size());
        tree6.delete(33);
        System.out.print("Delete 33: ");
        tree6.preorder();
        System.out.println("Size: " + tree6.size());
        tree6.delete(20);
        System.out.print("Delete 20: ");
        tree6.preorder();
        System.out.println("Size: " + tree6.size());
        tree6.delete(40);
        System.out.print("Delete 40: ");
        tree6.preorder();
        System.out.println("Size: " + tree6.size());
        tree6.delete(30);
        System.out.print("Delete 30: ");
        tree6.preorder();
        System.out.println("Size: " + tree6.size());
    } //main

} //BSTTester
